//* make a promise with the 'new' keyword and the Promise() constructor         function
// 1. pass a function to the Promise constructor function
// 2. in the passed in function is where we do the long running asynchronous       task (make a request to a server, trigger a firebase data change, etc)
// 3. when it's finished, we call one of two functions, depending on whether       it was successfully resolved or rejected
// 4. call resolve when it went as expected
// 5. call reject when it didnt work
const promise = new Promise((resolve, reject) => {
    setTimeout(() => {
        //* you can only pass one thing to resolve! so if you need multiple pieces of information, pass an object

        //resolve('this is my resolved data');

        reject('something went wrong');
    }, 5000);
});

console.log('before .then()');

// mostly the firebase promises will be created for me, but i need to know how to use them!
// firebase promises are generated by using methods like .set()
//* access the promise and register some callback functions
// inside .then(),  I have access to any data that was passed to resolve
promise
    .then(data => {
        //* do something with the resolved data
        console.log(data);
    })
    .then(() => {
        // this is a chained promise
        // it doesn't have get data passed in unless we return something from the promise up above
        console.log('does this run');
    })
    .catch(error => {
        // .catch() fires when the promise rejects, and we get access to that error data
        //* do something with the rejected data
        console.log('error: ', error);
    });

console.log('after .then()');
